name: Daily Commit Check

on:
  schedule:
    # Runs at 930 PM PST every day
    - cron: '30 5 * * *'
  workflow_dispatch: 

jobs:
  check-commits:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check for today's commits
      uses: actions/github-script@v6
      with:
        script: |
          const username = 'tbw875';
          
          // Helper function to convert UTC to PST
          function convertToPST(date) {
            return new Date(date.toLocaleString('en-US', {
              timeZone: 'America/Los_Angeles',
              year: 'numeric',
              month: '2-digit',
              day: '2-digit',
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit',
              hour12: false
            }));
          }
          
          // Get today's date in PST
          const now = convertToPST(new Date());
          const today = now.toISOString().split('T')[0];
          
          let page = 1;
          let commitFound = false;

          function isInCommitWindow(eventDate) {
            // GitHub API returns UTC timestamps
            const eventUTC = new Date(eventDate);
            
            // Convert to PST/PDT
            const pstOptions = { timeZone: 'America/Los_Angeles' };
            const eventPST = new Date(eventUTC.toLocaleString('en-US', pstOptions));
            const nowPST = new Date(new Date().toLocaleString('en-US', pstOptions));
            
            // Get start of day in PST
            const startOfDay = new Date(nowPST);
            startOfDay.setHours(0, 0, 0, 0);
            
            // Get end of window (9:30 PM PST)
            const endOfWindow = new Date(nowPST);
            endOfWindow.setHours(21, 30, 0, 0);
            
            // Debug logging
            console.log('Event UTC:', eventUTC);
            console.log('Event PST:', eventPST);
            console.log('Start of day PST:', startOfDay);
            console.log('End of window PST:', endOfWindow);
            
            return eventPST >= startOfDay && eventPST <= endOfWindow;
          }
          
          // Check all pages until we find a commit or run out of events
          while (!commitFound) {
            console.log(`Checking for commits...`);
            
            // Get authenticated user's repos
            const repos = await github.rest.repos.listForAuthenticatedUser({
              per_page: 100,
              page: page
            });
            
            console.log(`Found ${repos.data.length} repositories on page ${page}`);
            
            // No more repos to check
            if (repos.data.length === 0) {
              console.log('No more repositories to check');
              break;
            }
            
            for (const repo of repos.data) {
              console.log(`\nChecking commits in ${repo.name}...`);
              
              try {
                // Get commits for each repo
                const commits = await github.rest.repos.listCommits({
                  owner: repo.owner.login,
                  repo: repo.name,
                  author: username,
                  since: new Date(new Date().setHours(0, 0, 0, 0)).toISOString(),
                  until: new Date(new Date().setHours(23, 59, 59, 999)).toISOString()
                });
                
                if (commits.data.length > 0) {
                  console.log(`Found ${commits.data.length} commits today in ${repo.name}`);
                  commitFound = true;
                  break;
                }
              } catch (error) {
                // Skip if we can't access the repo
                console.log(`Skipping ${repo.name}: ${error.message}`);
                continue;
              }
            }
            
            page++;
            
            if (page > 5) {
              console.log('Reached maximum page limit (5)');
              break;
            }
          }
          
          console.log('\n=== Final Result ===');
          console.log('Commit found:', commitFound);
          
          if (!commitFound) {
            // If no commit found, send notification via webhook
            const webhook_url = process.env.WEBHOOK_URL;
            const webhook_secret = process.env.WEBHOOK_SECRET;
            
            await fetch(webhook_url, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-Webhook-Secret': webhook_secret
              },
              body: JSON.stringify({
                message: "Don't forget to make your daily commit!"
              })
            });
          }

          
    env:
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}

permissions:
  contents: read
  actions: read
  metadata: read
